/**
 * This is a short and incomplete test of the PARDISO C++ wrapper.
 * It constructs a small random system of equations for both real
 * and complex numbers and solves it using the direct solver for
 * general matrices.
 *
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
 *
 */

#include "pardiso.hpp"

#include <iostream>
#include <vector>
#include <complex>
#include <random>

#include <blaze/Blaze.h>

namespace {
    template <typename Rng>
    void test(Rng rng) {
        using ElementType = decltype(rng());
        constexpr size_t NROW = 10;

        // build input matrix and rhs vector
        blaze::CompressedMatrix<ElementType> mat(NROW, NROW);
        blaze::DynamicVector<ElementType> rhs(NROW);
        for (size_t row = 0; row < NROW; ++row) {
            for (size_t aux = 0; aux < NROW/3; ++aux) {
                mat(row, (2*row+aux)%NROW) = rng();
            }
            rhs[row] = rng();
        }

        // initialise PARDISO
        Pardiso::State<ElementType> pstate(Pardiso::MType::NON_SYM,
                                           Pardiso::Solver::DIRECT,
                                           1);

        // run PARDISO to solve the system of equations
        auto solution = pstate(mat, rhs);

        std::cout << "### Max error = "
                  << blaze::max(blaze::abs(mat*solution - rhs))
                  << '\n';
    }
}

int main() {
    std::mt19937 rng(123);
    std::normal_distribution<double> dist;

    test([&]() mutable { return dist(rng); });
    test([&]() mutable { return std::complex<double>{dist(rng), dist(rng)}; });
}
